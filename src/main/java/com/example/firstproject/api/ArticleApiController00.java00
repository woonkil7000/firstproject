package com.example.firstproject.api;
import com.example.firstproject.dto.ArticleForm;
import com.example.firstproject.entity.Article;
import com.example.firstproject.repository.ArticleRepository;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Slf4j
@RestController
public class ArticleApiController00 {

    @Autowired // DI
    private ArticleRepository articleRepository;

    //GET
    @GetMapping("/api/articles")
    public List<Article> index(){

        return articleRepository.findAll();

    }

    @GetMapping("/api/articles/{id}")
    public Article index(@PathVariable Long id){

        return articleRepository.findById(id).orElse(null);

    }

    @PostMapping("/api/articles")
    public Article create(@RequestBody ArticleForm dto){

        // form data 가 아닌 json data 이므로 @RequestBody 로 받는다.

        Article article = dto.toEntity();
        log.info(" #### Article article = dto.toEntity() => "+dto.toEntity().toString());
        return articleRepository.save(article);

    }

    // Patch
    @PatchMapping("/api/articles/{id}")
    public ResponseEntity<Article> update(@PathVariable Long id, @RequestBody ArticleForm dto) {
        // json 데이타로 반환. ResponseEntity.

        // 1. 수정용 엔티티 생성
        Article articleEntity = dto.toEntity();

        log.info(" ##### id: {}, articleEntity: {} ",id, dto.toEntity().toString());

        // 2. 수정 대상 엔티티 조회.
        Article target = articleRepository.findById(id).orElse(null);

        log.info(" ##### @PatchMapping :: Article target = articleRepository.findById(articleEntity.getId()).orElse(null)");
        //log.info(" target.toString() => " + target.toString());



        // 3. 잘못된 요청 처리.
        if(target == null || id != articleEntity.getId()){

            // 400.  잘못된 요청.응답!!
            log.info(" ##### 잘못된 요청 :: id: {}, articleEntity: {} ",id, dto.toEntity().toString());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(target);
            //return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);
        }

        // 4. 업데이트 및 정상 응답(200)
        target.patch(articleEntity);
        // Article.patch()
        // title or content data 만 수정이 요청되는 경우
        // 입력한 부분만 수정. Article.patch() 함수 처리.

        Article updated = articleRepository.save(target);

        // 수정 후 json 수정 후 데이타 리턴.
        return ResponseEntity.status(HttpStatus.OK).body(updated);
    }

    // Delete
    @DeleteMapping("/api/articles/{id}")
    public ResponseEntity<Article> delete(@PathVariable Long id) {

        // 대상찾기
        Article target = articleRepository.findById(id).orElse(null);

        // 잘못된 요청 처리
        if(target == null ){
            // 400.  잘못된 요청.응답!!
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);
        }

        // 대상 삭제
        articleRepository.delete(target);

        // 데이타 반환
        return ResponseEntity.status(HttpStatus.OK).build();
    }

}
